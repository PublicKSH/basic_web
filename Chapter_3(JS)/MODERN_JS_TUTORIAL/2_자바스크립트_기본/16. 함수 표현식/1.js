// 1. 함수 표현식

let sayHi = function() {
    alert( "Hello" );
  };

// 함수 표현식으로 함수를 만들 수 있따.
// 함수의 본질은 값이다.
// 변수를 복사해 다른 변수에 할당하는 것처럼 함수를 복사해 다른 변수에 할당할 수도 있습니다.

// 2. 콜백 함수
// 함수 ask의 인수, showOk와 showCancel은 콜백 함수 또는 콜백이라고 불립니다.

// 함수는 "동작"을 나타내는 값!

// 3. 함수 표현식 vs 함수 선언문

// 두 번째 차이는 자바스크립트 엔진이 언제 함수를 생성하는지에 있습니다.

// 함수 표현식은 실제 실행 흐름이 해당 함수에 도달했을 때 함수를 생성합니다. 따라서 실행 흐름이 함수에 도달했을 때부터 해당 함수를 사용할 수 있습니다.

// 위 예시를 이용해 설명해 보도록 하겠습니다. 스크립트가 실행되고, 실행 흐름이 let sum = function…의 우측(함수 표현식)에 도달 했을때 함수가 생성됩니다. 이때 이후부터 해당 함수를 사용(할당, 호출 등)할 수 있습니다.

// 하지만 함수 선언문은 조금 다릅니다.

// 함수 선언문은 함수 선언문이 정의되기 전에도 호출할 수 있습니다.

// 따라서 전역 함수 선언문은 스크립트 어디에 있느냐에 상관없이 어디에서든 사용할 수 있습니다.

// 이게 가능한 이유는 자바스크립트의 내부 알고리즘 때문입니다. 자바스크립트는 스크립트를 실행하기 전, 준비단계에서 전역에 선언된 함수 선언문을 찾고, 해당 함수를 생성합니다. 스크립트가 진짜 실행되기 전 "초기화 단계"에서 함수 선언 방식으로 정의한 함수가 생성되는 것이죠.

let age = prompt("나이를 알려주세요.", 18);

let welcome = (age < 18) ? 
  () => alert('안녕') :
  () => alert('안녕하세요');

let ask = (confirm("동의하십니까?")) ?
  () => alert("동의하셨습니다.") :
  () => alert("취소 버튼을 누르셧습니다.");