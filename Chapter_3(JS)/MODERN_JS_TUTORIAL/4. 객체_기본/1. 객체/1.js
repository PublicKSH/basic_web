// 1. 객체
// 빈 객체(빈 서랍장)를 만드는 방법은 두 가지가 있습니다.

let user = new Object(); // '객체 생성자' 문법
let user1 = {};  // '객체 리터럴' 문법

// 중괄호 {...}를 이용해 객체를 선언하는 것을 객체 리터럴(object literal) 이라고 부릅니다

// 2. 리터럴과 프로퍼티
// 중괄호 {...} 안에는 ‘키: 값’ 쌍으로 구성된 프로퍼티가 들어갑니다.
let user2 = {     // 객체
    name: "John",  // 키: "name",  값: "John"
    age: 30,        // 키: "age", 값: 30
    "likes birds": true,  // 복수의 단어는 따옴표로 묶어야 합니다.
  };

delete user.age;

// 상수 객체는 수정될 수 있습니다.

// 3. 대괄호 표기법
user["likes birds"] = true; // 와 같이 복수의 단어로 된 프로퍼티를 읽기 위해서 사용

// '점’은 키가 '유효한 변수 식별자’인 경우에만 사용할 수 있습니다. 
// 대괄호 표기법은 키에 어떤 문자열이 있던지 상관없이 동작합니다.

// 4. 계산된 프로퍼티
// 객체를 만들 때 객체 리터럴 안의 프로퍼티 키가 대괄호로 둘러싸여 있는 경우, \
// 이를 계산된 프로퍼티(computed property) 라고 부릅니다.

// 대괄호 표기법은 프로퍼티 이름과 값의 제약을 없애주기 때문에 점 표기법보다 훨씬 강력합니다. 그런데 작성하기 번거롭다는 단점이 있습니다.

// 이런 이유로 프로퍼티 이름이 확정된 상황이고, 단순한 이름이라면 처음엔 점 표기법을 사용하다가 뭔가 복잡한 상황이 발생했을 때 대괄호 표기법으로 바꾸는 경우가 많습니다.

// 5. 단축 프로퍼티
function makeUser(name, age) {
  return {
    name, // name: name 과 같음 -> 단축 프로퍼티
    age,  // age: age 와 같음
    // ...
  };
}

// 6. 프로퍼티 이름의 제약사항

// 예약어를 키로 사용해도 된다.

// 키에 숫자를 넣으면 자동으로 문자열로 자동변환 된다.
let obj = {
  0: "test" // "0": "test"와 동일합니다.
};

// 숫자 0은 문자열 "0"으로 변환되기 때문에 두 얼럿 창은 같은 프로퍼티에 접근합니다,
alert( obj["0"] ); // test
alert( obj[0] ); // test (동일한 프로퍼티)

// 7. for 반복문
let user = {
  name: "John",
  age: 30,
  isAdmin: true
};

for (let key in user) {
  // 키
  alert( key );  // name, age, isAdmin
  // 키에 해당하는 값
  alert( user[key] ); // John, 30, true
}

